type Query {
  """
    Returns a list of all `tech` names with doc counts.
    See stm_graphql/samples/es-responses/devs_per_language.json for the full example.
  """
  devsPerLanguage: ESAggs!
  """
    Returns the number of devs matching the stack.
    See stm_graphql/samples/es-responses/dev_count_for_stack.json for the full example.
  """
  devCountForStack(stack: [TechExperience!]!, pkgs: [String!]!): Int!
  """
    Returns a list of keywords starting with what the user typed in so far.
    See stm_graphql/samples/es-responses/devs_per_language.json for the full example.
  """
  keywordSuggester(startsWith: String!): ESAggs
}

"Part of ESAggs"
type ESAggsAgg {
  agg: ESAggsBuckets!
}

"Describes the required experience level for the tech."
input TechExperience {
  "Name of the tech, e.g. `c#`, case insensitive." tech: String!
  "Band for the minimum number of lines of code. Valid values 1 and 2. Any other value is ignored and no LoC search clause is constructed." locBand: Int
}

scalar U64

"""
  A generic structure for ES aggregations result. Make sure the aggregation name is `agg`.
  ```json
    {
      "aggregations" : {
        "agg" : {
          "buckets" : [
            {
              "key" : "twilio",
              "doc_count" : 597
            }
          ]
        }
      }
    }
  ```
"""
type ESAggs {
  aggregations: ESAggsAgg!
}

"Part of ESAggs"
type ESAggsBuckets {
  buckets: [ESAggsBucket!]!
}

"Part of ESAggs"
type ESAggsBucket {
  key: String!
  docCount: U64!
}

schema {
  query: Query
}
