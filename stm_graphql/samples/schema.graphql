type KeywordCounter {
  "keyword"
  k: String!
  "array of free text after the keyword"
  t: [String!]
  "count"
  c: U64!
}

type Query {
  """
    Returns a list of all `tech` names with doc counts.
    See stm_graphql/samples/es-responses/devs_per_language.json for the full example.
  """
  devsPerLanguage: ESAggs!
  """
    Returns the number of devs matching the stack.
    See stm_graphql/samples/es-responses/dev_count_for_stack.json for the full example.
  """
  devCountForStack(stack: [TechExperience!]!, pkgs: [String!]!): Int!
  """
    Returns the list of devs matching the stack.
    See stm_graphql/samples/gql-responses/devListForStack.gql.json for the full example.
  """
  devListForStack(stack: [TechExperience!]!, pkgs: [String!]!): [GitHubUser!]!
  """
    Returns a list of keywords starting with what the user typed in so far.
    See stm_graphql/samples/es-responses/devs_per_language.json for the full example.
  """
  keywordSuggester(startsWith: String!): ESAggs
}

"Describes the required experience level for the tech."
input TechExperience {
  "Name of the tech, e.g. `c#`, case insensitive." tech: String!
  "Band for the minimum number of lines of code. Valid values 1 and 2. Any other value is ignored and no LoC search clause is constructed." locBand: Int
}

"Part of ESAggs"
type ESAggsBucket {
  key: String!
  docCount: U64!
}

"Contains time-range data for its parent Tech."
type TechHistory {
  "Number of months between the first and the last commit."
  months: U64!
  "The date of the first commit for the technology in EPOCH format."
  fromDateEpoch: I64!
  "The date of the first commit for the technology in 2018-12-09T22:29:40+01:00 format."
  fromDateIso: String!
  "The date of the last commit for the technology in EPOCH format."
  toDateEpoch: I64!
  "The date of the last commit for the technology in 2018-12-09T22:29:40+01:00 format."
  toDateIso: String!
}

"""
  Number of commits or percentage of commits per UTC hour.
  The structure is skipped in JSON if all values are zero and is initialized to all zeros to have fewer Option<T> unwraps.
"""
type CommitTimeHistoHours {
  h00: U64!
  h01: U64!
  h02: U64!
  h03: U64!
  h04: U64!
  h05: U64!
  h06: U64!
  h07: U64!
  h08: U64!
  h09: U64!
  h10: U64!
  h11: U64!
  h12: U64!
  h13: U64!
  h14: U64!
  h15: U64!
  h16: U64!
  h17: U64!
  h18: U64!
  h19: U64!
  h20: U64!
  h21: U64!
  h22: U64!
  h23: U64!
}

type ContributorFile {
  "The file name extracted from GIT, including the relative path, e.g. `myproject/src/main.rs`"
  name: String!
  "SHA1 of the very last commit that affected this file"
  commit: String!
  "Date and time of the commit as EPOCH"
  dateEpoch: I64!
  "Date and time of the commit as a human readable ISO date"
  dateIso: String!
}

"""
  Contains the number of elements per list to help with DB queries.
  The numbers are calculated once before saving the Report in the DB.
"""
type ListCounts {
  tech: U64!
  contributorGitIds: U64!
  perFileTech: U64!
  fileTypes: U64!
  reportsIncluded: U64!
  projectsIncluded: U64!
  gitIdsIncluded: U64!
  contributors: U64!
  treeFiles: U64!
  recentProjectCommits: U64!
  keywords: U64!
}

"""
  # PRIVACY REMINDER
  Any additions to this struct should be considered for clean up before submission to stackmuncher.com
  to avoid sending out any info that doesn't need to be sent.
  See https://github.com/stackmuncher/stm_app/issues/12
"""
type Tech {
  "The name of the file for individual file reports. Not present in combined tech reports."
  fileName: String
  "The computer language as identified by the muncher"
  language: String!
  "The name of the muncher used to process the file"
  muncherName: String!
  "A short hash of the muncher rules to detect a muncher change for reprocessing"
  muncherHash: U64!
  """
    SHA1 of the commit this file was taken from. E.g. 105eaf871c7248c93ae2f13337e9881caf89d489
    It is used for hashing. Not present in combined tech reports.
  """
  commitSha1: String
  """
    The date of the commit this file was taken from in EPOCH format. E.g. 1544532686
    Not present in combined tech reports.
  """
  commitDateEpoch: I64
  """
    The date of the commit this file was taken from in ISO format. E.g. 2018-12-09T22:29:40+01:00
    Not present in combined tech reports.
  """
  commitDateIso: String
  files: U64!
  totalLines: U64!
  blankLines: U64!
  bracketOnlyLines: U64!
  codeLines: U64!
  inlineComments: U64!
  lineComments: U64!
  blockComments: U64!
  docsComments: U64!
  """
    Historical stats for this tech record: first/last commits, LoC changes.
    Populated on STM server.
    See https://github.com/stackmuncher/stm_app/issues/46 for more info.
  """
  history: TechHistory
  "Language-specific keywords, e.g. static, class, try-catch"
  keywords: [KeywordCounter!]!
  """
    References to other libs, packages and namespaces
    E.g. `use` keyword
  """
  refs: [KeywordCounter!]!
  """
    Unique words from refs. Only populated during the final merge of
    all user reports.
  """
  refsKw: [KeywordCounter!]
  """
    References to other libs and packages in pkg managers
    E.g. refs from NuGet or Cargo.toml
  """
  pkgs: [KeywordCounter!]!
  """
    Unique words from pkgs. Only populated during the final merge of
    all user reports.
  """
  pkgsKw: [KeywordCounter!]
}

"""
  A very concise overview of a single Tech record
  to show the share of the technology in the project
"""
type TechOverview {
  "The same as Tech.language"
  language: String!
  "Lines Of Code including blank lines"
  loc: U64!
  "Total number of unique library names"
  libs: U64!
  "Percentage of the LoC for this tech from the total LoC for the project"
  locPercentage: U64!
}

"""
  A GIT author or committer. E.g. `Author: rimutaka <max@onebro.me>` from `git log`.
  It contains extended info like what was committed, when, contact details.
"""
type Contributor {
  """
    Email is the preferred ID, but it can be just the name if the email is missing, e.g. `max@onebro.me` for `Author: rimutaka <max@onebro.me>`

    A contributor with name, but no email should only match if the other record has no email either. It's easier to merge fragmented reports
    than separating wrong attribution.
  """
  gitId: String!
  """
    A list of possible identities as name/email pairs for extracting contact details and de-duplication.
    E.g. `Author: rimutaka <max@onebro.me> would be `rimutaka`/`max@onebro.me`.
  """
  nameEmailPairs: [[String!]!]!
  "The full SHA1 of the very last commit by this contributor. This bit should be retained for matching repositories on STM server."
  lastCommitSha1: String!
  "The timestamp as EPOCH of the very last commit by this contributor."
  lastCommitEpoch: I64!
  "The timestamp of the last commit by this contributor formatted as RFC-3339."
  lastCommitDate: String!
  """
    The number of commits by the contributor.
    This can be taken from counting the number of entries in `commits` property, but that may be capped
    in the future, so it's easier to have a separate counter.
  """
  commitCount: U64!
  "The list of files touched by this contributor as FileName/CommitSHA1 tuple."
  touchedFiles: [ContributorFile!]!
  "A list of pointers at contributor commits in recent project commits member of Report."
  commits: [U64!]!
}

"""
  An overview of an individual project report included in the combined report
  to avoid loading the full project report every time the combined report is looked at.
"""
type ProjectReportOverview {
  "A human-readable project name. It should not be used as an ID."
  projectName: String!
  """
    `owner_id` + `project_id` are used to identify which project the overview belongs to.
    There should be just one project included in a contributor or a combined contributor report.
    Each combined report is submitted to STM server and is further combined with reports for other projects from the same dev there.
    Values are set on the server. Values set on the client are ignored.
  """
  ownerId: String
  """
    `owner_id` + `project_id` are used to identify which project the overview belongs to.
    The value is an internal STM server project ID derived from commit hashes.
    E.g. `KxnFH4mTcfEQ73umbt6e1Y`.
    Values are set on the server. Values set on the client are ignored.
  """
  projectId: String
  """
    GitHub user name, if known.
    Values are set on the server. Values set on the client are ignored.
  """
  githubUserName: String
  """
    A GitHub name of the project, if known. GitHub project names do not include the user name.
    E.g. `https://github.com/awslabs/aws-lambda-rust-runtime.git` would have project name as `aws-lambda-rust-runtime`.
    Values are set on the server. Values set on the client are ignored.
  """
  githubRepoName: String
  "The date of the first project commit, UTC, time reset to 0, e.g. 2020-08-26T00:00:00+00:00"
  dateInit: String
  "The date of the current HEAD for project, UTC, time reset to 0, e.g. 2020-08-26T00:00:00+00:00"
  dateHead: String
  "The date of the first contributor commit, UTC, time reset to 0, e.g. 2020-08-26T00:00:00+00:00"
  contributorFirstCommit: String
  "The date of the latest contributor commit, UTC, time reset to 0, e.g. 2020-08-26T00:00:00+00:00"
  contributorLastCommit: String
  """
    Lines Of Code (excludes blank lines) to show the size of the contribution.
    The value is set to zero in full project reports.
  """
  loc: U64!
  """
    Total number of unique library names to show the breadth of the contribution
    /// The value is set to zero in full project reports.
  """
  libs: U64!
  """
    Lines Of Code (excludes blank lines) to show the size of the project.
    The value is set to the size of the project in project and contributor reports.
  """
  locProject: U64!
  """
    Total number of unique library names to show the breadth of the project.
    The value is set to the size of the project in project and contributor reports.
  """
  libsProject: U64!
  "Total number of contributors to show the size of the team."
  ppl: U64!
  "Total number of commits by the contributor, if there is one."
  commitCount: U64!
  "Total number of commits in the repo."
  commitCountProject: U64!
  "Stats per stack technology."
  tech: [TechOverview!]!
  """
    The last N commits for matching reports to projects.
    Full project reports have the list of commits from all contributors. Contributor reports only have commits for that contributor.
  """
  commits: [String!]
}

"Contains members and methods related to commit time histogram"
type CommitTimeHisto {
  """
    The sum of all commits included in `histogram_recent`. This value is used as the 100% of all recent commits.
    The value is populated once after all commits have been added.
  """
  histogramRecentSum: U64!
  """
    The sum of all commits included in `histogram_all`. This value is used as the 100% of all commits.
    The value is populated once after all commits have been added.
  """
  histogramAllSum: U64!
  "The standard deviation of `histogram_recent` values."
  histogramRecentStd: Float!
  "The standard deviation of `histogram_all` values."
  histogramAllStd: Float!
  """
    Initially, the contains the number of commits per UTC hour for the last N days as defined in `RECENT_PERIOD_LENGTH_IN_DAYS` const.
    Later the values are recalculated to percentages for storing in the DB.
  """
  histogramRecent: CommitTimeHistoHours!
  """
    Initially, the contains the number of commits per UTC hour for the entire commits history.
    Later the values are recalculated to percentages for storing in the DB.
  """
  histogramAll: CommitTimeHistoHours!
  """
    Number of working hours in overlap between the dev's active time and the 8am - 6pm working day in the specified time zone.
    Timezones with negative offset are represented as 24-offset. E.g. `-6` hours will be in `h18`.
    Only activity within standard deviation is included.
  """
  timezoneOverlapRecent: CommitTimeHistoHours!
  """
    Number of working hours in overlap between the dev's active time and the 8am - 6pm working day in the specified time zone.
    Timezones with negative offset are represented as 24-offset + the negative value. E.g. `-6` hours will be in `h18` (24-6-18).
    Only activity within standard deviation is included.
  """
  timezoneOverlapAll: CommitTimeHistoHours!
}

"Part of ESAggs"
type ESAggsAgg {
  agg: ESAggsBuckets!
}

scalar U64

"""
  A generic structure for ES aggregations result. Make sure the aggregation name is `agg`.
  ```json
    {
      "aggregations" : {
        "agg" : {
          "buckets" : [
            {
              "key" : "twilio",
              "doc_count" : 597
            }
          ]
        }
      }
    }
  ```
"""
type ESAggs {
  aggregations: ESAggsAgg!
}

"Part of ESAggs"
type ESAggsBuckets {
  buckets: [ESAggsBucket!]!
}

scalar I64

type Report {
  """
    The exact timestamp of the report generation in ISO3389 format.
    E.g. 2018-12-09T22:29:40+01:00
  """
  timestamp: String!
  """
    Member email address for STM notifications. No update is needed if None. Clear if Some("").
    Only used for Inbox reports.
  """
  primaryEmail: String
  "GitHub user name, if known"
  githubUserName: String
  """
    A public name of the project, if known. GitHub project names do not include the user name.
    E.g. `https://github.com/awslabs/aws-lambda-rust-runtime.git` would be `aws-lambda-rust-runtime`.
  """
  githubRepoName: String
  """
    A unique identifier of the dev on STM server, if known.
    Populated by the server upon report submission and is None otherwise.
  """
  ownerId: String
  "Populated by the server upon report submission and is None otherwise."
  projectId: String
  "A UUID of the report"
  reportId: String!
  "A unique name containing user name and project name when stored in S3, e.g. `rimutaka/stackmuncher.report`"
  reportS3Name: String!
  """
    A GH ownership validation Gist ID.
    E.g. fb8fc0f87ee78231f064131022c8154a from https://gist.github.com/rimutaka/fb8fc0f87ee78231f064131022c8154a
    The app validates it, but it has to be re-checked on the server on changes and possibly more often.
  """
  ghValidationId: String
  "The very last commit at the time of the report generation."
  reportCommitSha1: String
  "A SHA1 hash of all commit SHA1s to determine changes by looking at the log"
  logHash: String
  "Is `true` if the report was generated by adding a single commit to a cached report"
  isSingleCommit: Boolean!
  "Git identity of the author of the last (HEAD) commit. Should only be present in the project report."
  lastCommitAuthor: String
  "SHA1 of the last commit made by the contributor. Used in contributor reports only and is blank in project reports."
  lastContributorCommitSha1: String
  """
    An ISO formatted date of the last commit made by the contributor.
    Used in contributor reports only and is blank in project reports.
    E.g. 2018-12-09T22:29:40+01:00
  """
  lastContributorCommitDateIso: String
  """
    An EPOCH formatted date of the last commit made by the contributor.
    Used in contributor reports only and is blank in project reports.
    E.g. 1627176058
  """
  lastContributorCommitDateEpoch: I64
  """
    SHA1 of the first commit made by the contributor.
    Used in contributor reports only and is blank in project reports.
  """
  firstContributorCommitSha1: String
  """
    An ISO formatted date of the first commit made by the contributor.
    Used in contributor reports only and is blank in project reports.
    E.g. 2018-12-09T22:29:40+01:00
  """
  firstContributorCommitDateIso: String
  """
    An EPOCH formatted date of the first commit made by the contributor.
    Used in contributor reports only and is blank in project reports.
    E.g. 1627176058
  """
  firstContributorCommitDateEpoch: I64
  """
    The date of the first commit for the entire repo.
    Combined reports have  the same value as first_contributor_commit.
  """
  dateInit: String
  """
    The date of the last commit for the entire repo or the current HEAD.
    Combined reports have  the same value as last_contributor_commit.
  """
  dateHead: String
  """
    The number of records in `contributor_git_ids` for contributor report.
    Contributors only have their own contributor ID included, so it is not possible to say how big the team
    was just by looking at the contributor report.
  """
  contributorCount: U64
  """
    Lines Of Code (excludes blank lines) to show the size of the project.
    The value is set to the size of the project in project and contributor reports.
  """
  locProject: U64
  """
    Total number of unique library names to show the breadth of the project.
    The value is set to the size of the project in project and contributor reports.
  """
  libsProject: U64
  "Total number of commits by the contributor, if there is one. Valid for contributor reports only."
  commitCountContributor: U64
  "Total number of commits in the repo. Valid for repo and contributor reports."
  commitCountProject: U64
  """
    List of names or emails of all project contributors (authors and committers) from `contributors` section.
    This member is only set on project reports and is missing from individual or combined contributor reports.
  """
  contributorGitIds: [String!]
  """
    Contains the number of elements per list contained in this report to help with DB queries.
    The values are calculated once before saving the reports.
  """
  listCounts: ListCounts
  """
    Combined summary per technology, e.g. Rust, C# or CSS
    This member can be shared publicly after some clean up
  """
  tech: [Tech!]!
  """
    Per-file technology summary, e.g. Rust/main.rs.
    This member should not be shared publicly, unless it's a public project
    because file names are sensitive info that can be exploited.
  """
  perFileTech: [Tech!]!
  unprocessedFileNames: [String!]!
  "A list of all file extensions used in the project with the number of times they were encountered."
  fileTypes: [KeywordCounter!]!
  """
    S3 keys of the reports from `report_s3_name` merged into a combined user or org report
    This attribute was depricated in favour of projects_included, but has to be in use until
    https://github.com/stackmuncher/stm-html/issues/8 is resolved.
  """
  reportsIncluded: [String!]!
  """
    Blank for individual project reports. It is only needed by STM server to display project details on the combined report page
    without going to the individual project reports.
  """
  projectsIncluded: [ProjectReportOverview!]!
  """
    A list of GIT identities for the contributors included in the report.
    Used only in combined contributor reports
  """
  gitIdsIncluded: [String!]!
  "List of names and emails of all committers for this repo. Only applies to per-project reports."
  contributors: [Contributor!]
  """
    Number of commits per UTC hour and other stats related to committer active hours.
    Used to determine approximate active timezone of the dev.
  """
  commitTimeHisto: CommitTimeHisto
  "The current list of files in the GIT tree"
  treeFiles: [String!]
  """
    The last N commits for matching projects that changed name, remote URL or any other identifying property
    The commits are shortened and joined with their EPOCHs in a single string. E.g. `e29d17e6_1627380297`
  """
  recentProjectCommits: [String!]
  """
    A unique list of all keywords found in the report for search. Normalized to lower case and sorted a-z.
    Populated during merge.
  """
  keywords: [String!]
}

"""
  Reflects the structure used by GitHub API and combines properties for User and Org.
  It has been used as the main STM structure for all dev details.
"""
type GitHubUser {
  login: String!
  id: Int!
  nodeId: String!
  avatarUrl: String
  name: String
  company: String
  blog: String
  location: String
  email: String
  hireable: Boolean
  bio: String
  twitterUsername: String
  publicRepos: Int!
  publicGists: Int!
  followers: Int!
  following: Int!
  createdAt: String!
  updatedAt: String!
  isVerified: Boolean
  description: String
  userType: String
  report: Report
}

schema {
  query: Query
}
